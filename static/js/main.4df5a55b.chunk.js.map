{"version":3,"sources":["globals.ts","components/Button/Button.tsx","components/Navbar/Navbar.tsx","components/Heroblock/Heroblock.tsx","styles/img/bblue-blue.png","styles/img/Landfall_Logo_1.png","components/EventDetails/EventDetails.tsx","components/Tiles/Tile.tsx","components/Tiles/TileGroup.tsx","components/Footer/Footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["globals","discord","twitter","youtube","twitch","facebook","Button","actionText","link","iconLeft","iconRight","colorScheme","className","href","icon","Navbar","isLive","useState","isOpen","setIsOpen","isMobile","setIsMobile","windowSize","width","undefined","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","onClick","aria-expanded","valueOf","faTimes","faBars","aria-label","faCalendarAlt","faCoins","faUsers","faTwitch","faTwitter","faYoutube","faDiscord","faChevronRight","Heroblock","showVideoBlock","EventDetails","src","beyondBlue","alt","landfall","Tile","title","description","cta","anchor","id","TileGroup","tiles","map","tile","key","Footer","App","eventLive","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4df5a55b.chunk.js","sourcesContent":["export const globals = {\n  events: {\n    current: {\n      fullName: 'Australian Speedrun Marathon 2021',\n      preferredName: 'AusSpeedrun Marathon 2021',\n      shortName: 'ASM2021',\n      date: \"14 July 2021 11:00:00 GMT+1000\",\n    },\n    next: {\n      fullName: 'PAX 2021',\n      preferredName: 'PAX 2021',\n      shortName: 'PAX2021',\n      date: \"08 October 2021 10:00:00 GMT+1000\",\n    },\n  },\n  donateLink: 'http://donate.ausspeedruns.com/',\n  scheduleLink: 'http://schedule.ausspeedruns.com/',\n  incentivesLink: 'http://incentives.ausspeedruns.com/',\n  socialLinks: {\n    discord: 'http://discord.ausspeedruns.com/',\n    twitter: '//twitter.com/ausspeedruns',\n    youtube: '//youtube.com/ausspeedruns',\n    twitch: '//twitch.tv/ausspeedruns',\n    facebook: '//www.facebook.com/ausspeedruns'\n  },\n  ASM_2021_total: \"14,645.58\"\n}","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Button.scss\";\n\nexport type ButtonProps = {\n  actionText: string,\n  link: string,\n  iconLeft?: IconProp,\n  iconRight?: IconProp,\n  colorScheme?: \"primary\" | \"secondary\" | \"secondary inverted\" | \"primary lightHover\"\n}\n\nconst Button = ({actionText, link, iconLeft, iconRight, colorScheme = \"primary\"} : ButtonProps) => {\n  return (\n    <a className={`button ${colorScheme}`} href={link}>\n      { iconLeft && (<FontAwesomeIcon icon={iconLeft} />)}\n      <span>{ actionText }</span>\n      { iconRight && (<FontAwesomeIcon icon={iconRight} />)}\n    </a>\n  );\n};\n\nexport default Button;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Navbar.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitch,\n  faTwitter,\n  faDiscord,\n  faYoutube,\n  // faFacebook,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { faBars, faCalendarAlt, faTimes, faUsers, faChevronRight, faCoins } from \"@fortawesome/free-solid-svg-icons\";\nimport { globals } from \"../../globals\";\nimport Button from \"../Button/Button\";\n\ntype NavbarProps = {\n  isLive: boolean\n}\n\n// Define general type for useWindowSize hook, which includes width and height\ninterface Size {\n  width: number | undefined;\n  height: number | undefined;\n}\n\nconst Navbar = ({ isLive } : NavbarProps) => {\n  const [isOpen, setIsOpen] = useState<Boolean>(false);\n  const [isMobile, setIsMobile] = useState<Boolean>(true);\n  const windowSize: Size = useWindowSize();\n\n  useEffect(() => {\n    if (windowSize.width)\n      setIsMobile(windowSize.width < 768);\n  }, [windowSize]);\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"content\">\n        <div className=\"title\">\n          <a href=\"/\">\n            <span className=\"logo\"></span>\n            <h1>AusSpeedruns</h1>\n          </a>\n        </div>\n        <button className=\"menu-toggle\" onClick={() => setIsOpen(!isOpen)} aria-expanded={isOpen.valueOf()}>\n          { !isOpen ? (\n          <FontAwesomeIcon icon={faBars} />\n          ) : (\n            <FontAwesomeIcon icon={faTimes} />\n          )}\n          <span className=\"sr-only\">Menu</span>\n        </button>\n        { isMobile ? (<div className=\"break\"></div>\n        ) : ''}\n\n        <nav className={`main-menu ${isOpen ? 'menu-open' : 'menu-closed'}`} aria-label=\"Main menu\">\n          <ul>\n            <li>\n              <a href={globals.scheduleLink}>\n                { isMobile ? (<FontAwesomeIcon icon={faCalendarAlt} />) : '' }\n                <span className=\"text\">Schedule</span>\n              </a>\n            </li>\n            { isLive && <li><a href={globals.incentivesLink}>{ isMobile ? (<FontAwesomeIcon icon={faCoins} />) : '' }\n                <span className=\"text\">Incentives</span></a></li> }\n            <li>\n              <a href=\"#participate\">\n                { isMobile ? (<FontAwesomeIcon icon={faUsers} />) : '' }\n                <span className=\"text\">Get Involved</span>\n              </a>\n            </li>\n            <li className=\"social\">\n              <a href={globals.socialLinks.twitch}>\n                <FontAwesomeIcon icon={faTwitch} />\n                <span className={`text ${isMobile ? '' : 'sr-only'}`}>Follow us on Twitch</span>\n              </a>\n            </li>\n            {/* <li className=\"social\">\n              <a href={globals.socialLinks.facebook}>\n                <FontAwesomeIcon icon={faFacebook} />\n                <span className={`text ${isMobile ? '' : 'sr-only'}`}>Like us on Facebook</span>\n              </a>\n            </li> */}\n            <li className=\"social\">\n              <a href={globals.socialLinks.twitter}>\n                <FontAwesomeIcon icon={faTwitter} />\n                <span className={`text ${isMobile ? '' : 'sr-only'}`}>Follow us on Twitter</span>\n              </a>\n            </li>\n            <li className=\"social\">\n              <a href={globals.socialLinks.youtube}>\n                <FontAwesomeIcon icon={faYoutube} />\n                <span className={`text ${isMobile ? '' : 'sr-only'}`}>Subscribe to AusSpeedruns on Youtube</span>\n              </a>\n            </li>\n            <li className=\"social\">\n              <a href={globals.socialLinks.discord}>\n                <FontAwesomeIcon icon={faDiscord} />\n                <span className={`text ${isMobile ? '' : 'sr-only'}`}>Join us on Discord</span>\n              </a>\n            </li>\n            { isLive && <li className=\"cta\"><Button actionText=\"Donate\" link={globals.donateLink} iconRight={ faChevronRight } colorScheme={\"secondary inverted\"}/></li> }\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n};\n\n// Hook\nfunction useWindowSize(): Size {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<Size>({\n    width: undefined,\n    height: undefined,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Heroblock.scss\";\nimport { faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\nimport Countdown, { zeroPad, CountdownRenderProps } from \"react-countdown\";\nimport Button from \"../Button/Button\";\nimport TwitchVideoEmbed from \"../TwitchVideoEmbed/TwitchVideoEmbed\";\nimport { globals } from \"../../globals\";\n\nconst Heroblock = () => {\n  const showVideoBlock = false;\n  const countdownRender = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    milliseconds,\n    completed,\n  }: CountdownRenderProps) => {\n    // if (completed || (days <= 1 && hours < 1  && minutes < 20)) {\n    //   setShowVideoBlock(true)\n    // }\n\n    if (completed) return <span></span>;\n    else if (days > 0)\n      return (\n        <span>\n          <span className=\"sr-only\">\n            {days} days, {hours} hours, {minutes} minutes and {seconds} seconds\n            remaining\n          </span>\n          <span aria-hidden>\n            {zeroPad(days)}:{zeroPad(hours)}:{zeroPad(minutes)}:\n            {zeroPad(seconds)}\n          </span>\n        </span>\n      );\n    else if (hours > 0)\n      return (\n        <span>\n          <span className=\"sr-only\">\n            {hours} hours, {minutes} minutes and {seconds} seconds remaining\n          </span>\n          <span aria-hidden>\n            {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n          </span>\n        </span>\n      );\n    else\n      return (\n        <span>\n          <span className=\"sr-only\">\n            {minutes} minutes and {seconds} seconds\n            remaining\n          </span>\n          <span aria-hidden>\n            {zeroPad(minutes)}:{zeroPad(seconds)}\n          </span>\n        </span>\n      );\n  };\n\n  return (\n    <div className=\"heroblock\">\n      <div className=\"content\">\n        { showVideoBlock && (<TwitchVideoEmbed channel=\"ausspeedruns\" parent={window.location.hostname}/>) }\n        <div className=\"ctaBlock\">\n          <h1>AusSpeedruns Marathon 2021</h1>\n          <br/>\n          <h2>Thank you for helping us raise over ${globals.ASM_2021_total} for Beyond Blue</h2>\n          {/* <h2>ASM2021 raised a total of ${ASM_2021_TOTAL_RAISED}</h2> */}\n          {/* <h3 className=\"countdown monospaced\">\n            <Countdown\n              date={Date.parse(globals.events.current.date)}\n              renderer={countdownRender}\n              zeroPadTime={2}\n            />\n          </h3> */}\n          <p>\n            Thank you to all runners, volunteers, donators and viewers of ASM2021. The event has now finished and the above total is from only our donations directly to Beyond Blue; the total including money from subs will be added in coming days. Details about our next event at PAX 2021 will be shared in August, so please check back soon.\n          </p>\n          <p>Not finished watching amazing speedruns? Missed a game you wanted to watch? You can find videos of individual runs from ASM2021 and our previous events on our Youtube channel.</p>\n          { showVideoBlock && <Button actionText=\"Donate\" link={globals.donateLink} iconRight={ faChevronRight} colorScheme={\"primary lightHover\"}/> }\n          { !showVideoBlock && <Button actionText=\"Watch again\" link={globals.socialLinks.youtube} iconRight={ faChevronRight} colorScheme={\"primary lightHover\"}/> }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Heroblock;\n","export default __webpack_public_path__ + \"static/media/bblue-blue.123d3c18.png\";","export default __webpack_public_path__ + \"static/media/Landfall_Logo_1.faf135b5.png\";","import React from \"react\";\nimport \"./EventDetails.scss\";\nimport beyondBlue from \"../../styles/img/bblue-blue.png\";\n// import oaksHotels from \"../../styles/img/oaks-hotels.png\";\nimport landfall from \"../../styles/img/Landfall_Logo_1.png\";\nimport { globals } from \"../../globals\"\n\nconst EventDetails = () => {\n  return (\n    <div className=\"eventDetails\">\n      <div className=\"content\">\n        <h2>About AusSpeedrun Marathon 2021</h2>\n        {/* <p></p> */}\n        <div className=\"charitiesAndSponsors\">\n          <div className=\"charities\">\n            <h3>ASM2021 Charity</h3>\n            <div className=\"charity\">\n              <a href={globals.donateLink}><img src={beyondBlue} alt=\"Proudly supporting Beyond Blue\" /><span className=\"sr-only\">Proudly supporting Beyond Blue</span></a>\n            </div>\n          </div>\n          <div className=\"sponsorsSection\">\n            <div className=\"sponsors\">\n            <h3>ASM2021 Sponsor</h3>\n              <div className=\"sponsor\">\n                <a href=\"https://landfall.se/\"><img src={landfall} alt=\"Sponsored by Landfall Games\" /><span className=\"sr-only\">Sponsored by Landfall Games</span></a>\n              </div>\n            </div>\n          </div>\n        </div>\n        <p>\n          At ASM2021 we were able to raise over ${globals.ASM_2021_total} but we couldn't have done so without our incredible sponsors, volunteers, donations and support from our community. This total only includes donations made directly to Beyond Blue, and the complete total including money from Twitch subs will be updated in coming days. If you would like\n          to sponsor us for a future event, get in touch!\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default EventDetails;\n","import React from \"react\";\nimport Button, { ButtonProps } from \"../Button/Button\";\n\nexport type TileProps = {\n  title: string,\n  description: string,\n  cta?: ButtonProps,\n  anchor?: string\n}\n\nconst Tile = ({title, description, cta, anchor} : TileProps) => {\n  return (\n    <div className=\"tile\" id={anchor}>\n      <h3>{title}</h3>\n      <p>{description}</p>\n      {cta && (<Button {...{...cta, colorScheme: \"secondary\"}} />)}\n    </div>\n  );\n};\n\nexport default Tile;\n","import React from \"react\";\nimport Tile, { TileProps } from \"./Tile\";\nimport \"./Tiles.scss\"\n\ntype TileGroupProps = {\n  tiles: TileProps[]\n}\n\nconst TileGroup = ({tiles} : TileGroupProps) => {\n  return (\n    <div className=\"tileGroup\">\n      <div className=\"content\">\n        { tiles.map( (tile, key) => \n          <Tile key={key} {...tile} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TileGroup;\n","import {\n  faTwitch,\n  faTwitter,\n  faYoutube,\n  faDiscord,\n  // faFacebook,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport \"./Footer.scss\";\nimport { globals } from \"../../globals\";\n\nconst Footer = () => {\n  return (\n    <div>\n      <div className=\"acknowledgement\">\n        <div className=\"content\">\n          <p>\n            In the spirit of reconciliation, Australian Speedrunners\n            acknowledges the Traditional Custodians of country throughout\n            Australia and their connections to land, sea and community. We pay\n            our respect to their elders past and present and extend that respect\n            to all Aboriginal and Torres Strait Islander peoples today.\n          </p>\n        </div>\n      </div>\n      <div className=\"footer\">\n        <div className=\"content\">\n          <ul>\n            <li className=\"social\">\n              <a href={globals.socialLinks.twitch}>\n                <FontAwesomeIcon icon={faTwitch} />\n                <span className=\"text\">Follow us on Twitch</span>\n              </a>\n            </li>\n            {/* <li className=\"social\">\n              <a href={globals.socialLinks.facebook}>\n                <FontAwesomeIcon icon={faFacebook} />\n                <span className=\"text\">Like us on Facebook</span>\n              </a>\n            </li> */}\n            <li className=\"social\">\n              <a href={globals.socialLinks.twitter}>\n                <FontAwesomeIcon icon={faTwitter} />\n                <span className=\"text\">Follow us on Twitter</span>\n              </a>\n            </li>\n            <li className=\"social\">\n              <a href={globals.socialLinks.youtube}>\n                <FontAwesomeIcon icon={faYoutube} />\n                <span className=\"text\">\n                  Subscribe to AusSpeedruns on Youtube\n                </span>\n              </a>\n            </li>\n            <li className=\"social\">\n              <a href={globals.socialLinks.discord}>\n                <FontAwesomeIcon icon={faDiscord} />\n                <span className=\"text\">Join us on Discord</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Heroblock from \"./components/Heroblock/Heroblock\";\nimport EventDetails from \"./components/EventDetails/EventDetails\";\nimport TileGroup from \"./components/Tiles/TileGroup\";\nimport Footer from \"./components/Footer/Footer\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport TwitchChatEmbed from \"./components/TwitchChatEmbed/TwitchChatEmbed\";\nimport Ticker from \"./components/Ticker/Ticker\";\nimport { globals } from \"./globals\";\n\nfunction App() {\n  const eventLive = false;\n  // const [countDownInterval, setCountDownInterval] = useState<NodeJS.Timeout | null>(null)\n\n  // useEffect(() => {\n  //   const eventDate = Date.parse(globals.events.current.date);\n\n  //   if (!countDownInterval) {\n  //     setCountDownInterval(setInterval(function() {\n  //       // Get today's date and time\n  //       const now = new Date().getTime();\n\n  //       // Find the distance between now and the count down date\n  //       const distance = eventDate - now;\n\n  //       // Time calculations for days, hours, minutes and seconds\n  //       const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  //       const hours = Math.floor( (distance/(1000*60*60)) % 24 );\n  //       const days = Math.floor( distance/(1000*60*60*24) );\n\n  //       // If the count down is finished, write some text\n  //       if (!eventLive && days < 1 && hours < 1 && minutes < 20) {\n  //         console.log(\"Going live...\");\n  //         setEventLive(true);\n  //         if (countDownInterval)\n  //           clearInterval(countDownInterval);\n  //       }\n  //     }, 5000))\n  //   }\n  // }, [eventLive, countDownInterval])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar isLive={eventLive} />\n      </header>\n      <main>\n        <Heroblock />\n        { eventLive && <Ticker /> }\n        { eventLive && <TwitchChatEmbed channel=\"ausspeedruns\" parent={window.location.hostname}/> }\n        <EventDetails />\n        <TileGroup tiles={[\n          {\n            title: \"About AusSpeedruns\",\n            description: \"Also known as Australian Speedrunners, AusSpeedruns is a not-for-profit organisation that brings together the best speedrunners in Australia to raise money and awareness for charity at events across Australia.\"\n          },\n          {\n            title: \"Get Involved\",\n            description: \"ASM2021 may have finished but you can still get involved in our community. Find out what's happening and keep in touch with us on our discord.\",\n            anchor: \"participate\",\n            cta: {\n              actionText: \"Join our discord\",\n              link: globals.socialLinks.discord,\n              iconLeft: faDiscord\n            }\n          },\n          {\n            title: \"Next event\",\n            description: \"Our next event will be at PAX Australia 2021. Submissions for this event will be opening in August. Follow us on Twitter or join our discord for updates.\"\n          },\n        ]} />\n      </main>\n      <footer>\n        <Footer />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}